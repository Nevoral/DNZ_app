// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: query.sql

package BuffetRegister

import (
	"context"
	"database/sql"
	"time"
)

const createCustomerAndReturnIt = `-- name: CreateCustomerAndReturnIt :one
INSERT INTO Customer (Name, PhoneNumber, Role)
VALUES (?, ?, ?)
RETURNING id, name, phonenumber, role
`

type CreateCustomerAndReturnItParams struct {
	Name        string
	Phonenumber sql.NullString
	Role        string
}

func (q *Queries) CreateCustomerAndReturnIt(ctx context.Context, arg CreateCustomerAndReturnItParams) (Customer, error) {
	row := q.db.QueryRowContext(ctx, createCustomerAndReturnIt, arg.Name, arg.Phonenumber, arg.Role)
	var i Customer
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Phonenumber,
		&i.Role,
	)
	return i, err
}

const createOpenOrderAndReturnIt = `-- name: CreateOpenOrderAndReturnIt :one
INSERT INTO OpenOrder (ProductMenuID, CustomerID, Date, Summary, Status, ItemsOrdered)
VALUES (?, ?, ?, ?, ?, ?)
RETURNING id, productmenuid, customerid, date, summary, status, itemsordered
`

type CreateOpenOrderAndReturnItParams struct {
	Productmenuid int64
	Customerid    sql.NullInt64
	Date          time.Time
	Summary       int64
	Status        string
	Itemsordered  string
}

func (q *Queries) CreateOpenOrderAndReturnIt(ctx context.Context, arg CreateOpenOrderAndReturnItParams) (OpenOrder, error) {
	row := q.db.QueryRowContext(ctx, createOpenOrderAndReturnIt,
		arg.Productmenuid,
		arg.Customerid,
		arg.Date,
		arg.Summary,
		arg.Status,
		arg.Itemsordered,
	)
	var i OpenOrder
	err := row.Scan(
		&i.ID,
		&i.Productmenuid,
		&i.Customerid,
		&i.Date,
		&i.Summary,
		&i.Status,
		&i.Itemsordered,
	)
	return i, err
}

const createProductAndReturnIt = `-- name: CreateProductAndReturnIt :one
INSERT INTO Product (ProductMenuID, Title, Price, Served, Category)
VALUES (?, ?, ?, ?, ?)
RETURNING id, productmenuid, title, price, served, category
`

type CreateProductAndReturnItParams struct {
	Productmenuid int64
	Title         string
	Price         int64
	Served        int64
	Category      string
}

func (q *Queries) CreateProductAndReturnIt(ctx context.Context, arg CreateProductAndReturnItParams) (Product, error) {
	row := q.db.QueryRowContext(ctx, createProductAndReturnIt,
		arg.Productmenuid,
		arg.Title,
		arg.Price,
		arg.Served,
		arg.Category,
	)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.Productmenuid,
		&i.Title,
		&i.Price,
		&i.Served,
		&i.Category,
	)
	return i, err
}

const createProductMenuAndReturnIt = `-- name: CreateProductMenuAndReturnIt :one
INSERT INTO ProductMenu (Date, StartRegister, Activity)
VALUES (?, ?, ?)
RETURNING id, date, startregister, activity
`

type CreateProductMenuAndReturnItParams struct {
	Date          time.Time
	Startregister int64
	Activity      string
}

func (q *Queries) CreateProductMenuAndReturnIt(ctx context.Context, arg CreateProductMenuAndReturnItParams) (ProductMenu, error) {
	row := q.db.QueryRowContext(ctx, createProductMenuAndReturnIt, arg.Date, arg.Startregister, arg.Activity)
	var i ProductMenu
	err := row.Scan(
		&i.ID,
		&i.Date,
		&i.Startregister,
		&i.Activity,
	)
	return i, err
}

const getCustomerByID = `-- name: GetCustomerByID :one
SELECT id, name, phonenumber, role FROM Customer
WHERE ID=?
`

func (q *Queries) GetCustomerByID(ctx context.Context, id int64) (Customer, error) {
	row := q.db.QueryRowContext(ctx, getCustomerByID, id)
	var i Customer
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Phonenumber,
		&i.Role,
	)
	return i, err
}

const getListProductMenu = `-- name: GetListProductMenu :many
SELECT id, date, startregister, activity FROM ProductMenu
`

func (q *Queries) GetListProductMenu(ctx context.Context) ([]ProductMenu, error) {
	rows, err := q.db.QueryContext(ctx, getListProductMenu)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ProductMenu
	for rows.Next() {
		var i ProductMenu
		if err := rows.Scan(
			&i.ID,
			&i.Date,
			&i.Startregister,
			&i.Activity,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getListProductMenuActive = `-- name: GetListProductMenuActive :many
SELECT id, date, startregister, activity FROM ProductMenu
WHERE Activity=?
`

func (q *Queries) GetListProductMenuActive(ctx context.Context, activity string) ([]ProductMenu, error) {
	rows, err := q.db.QueryContext(ctx, getListProductMenuActive, activity)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ProductMenu
	for rows.Next() {
		var i ProductMenu
		if err := rows.Scan(
			&i.ID,
			&i.Date,
			&i.Startregister,
			&i.Activity,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getOpenOrderByID = `-- name: GetOpenOrderByID :one
SELECT id, productmenuid, customerid, date, summary, status, itemsordered FROM OpenOrder
WHERE ID=?
`

func (q *Queries) GetOpenOrderByID(ctx context.Context, id int64) (OpenOrder, error) {
	row := q.db.QueryRowContext(ctx, getOpenOrderByID, id)
	var i OpenOrder
	err := row.Scan(
		&i.ID,
		&i.Productmenuid,
		&i.Customerid,
		&i.Date,
		&i.Summary,
		&i.Status,
		&i.Itemsordered,
	)
	return i, err
}

const getProductByID = `-- name: GetProductByID :one
SELECT id, productmenuid, title, price, served, category FROM Product
WHERE ID=?
`

func (q *Queries) GetProductByID(ctx context.Context, id int64) (Product, error) {
	row := q.db.QueryRowContext(ctx, getProductByID, id)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.Productmenuid,
		&i.Title,
		&i.Price,
		&i.Served,
		&i.Category,
	)
	return i, err
}

const getProductByTitle = `-- name: GetProductByTitle :one
SELECT id, productmenuid, title, price, served, category FROM Product
WHERE Title=?
`

func (q *Queries) GetProductByTitle(ctx context.Context, title string) (Product, error) {
	row := q.db.QueryRowContext(ctx, getProductByTitle, title)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.Productmenuid,
		&i.Title,
		&i.Price,
		&i.Served,
		&i.Category,
	)
	return i, err
}

const getProductListByProductMenuID = `-- name: GetProductListByProductMenuID :many
SELECT id, productmenuid, title, price, served, category FROM Product
WHERE ProductMenuID=?
`

func (q *Queries) GetProductListByProductMenuID(ctx context.Context, productmenuid int64) ([]Product, error) {
	rows, err := q.db.QueryContext(ctx, getProductListByProductMenuID, productmenuid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Product
	for rows.Next() {
		var i Product
		if err := rows.Scan(
			&i.ID,
			&i.Productmenuid,
			&i.Title,
			&i.Price,
			&i.Served,
			&i.Category,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getProductListByProductMenuIDAndCategory = `-- name: GetProductListByProductMenuIDAndCategory :many
SELECT id, productmenuid, title, price, served, category FROM Product
WHERE ProductMenuID=? AND Category=?
`

type GetProductListByProductMenuIDAndCategoryParams struct {
	Productmenuid int64
	Category      string
}

func (q *Queries) GetProductListByProductMenuIDAndCategory(ctx context.Context, arg GetProductListByProductMenuIDAndCategoryParams) ([]Product, error) {
	rows, err := q.db.QueryContext(ctx, getProductListByProductMenuIDAndCategory, arg.Productmenuid, arg.Category)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Product
	for rows.Next() {
		var i Product
		if err := rows.Scan(
			&i.ID,
			&i.Productmenuid,
			&i.Title,
			&i.Price,
			&i.Served,
			&i.Category,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const setOpenOrderItemsOrdered = `-- name: SetOpenOrderItemsOrdered :exec
UPDATE OpenOrder
SET ItemsOrdered = ?
WHERE ID = ?
`

type SetOpenOrderItemsOrderedParams struct {
	Itemsordered string
	ID           int64
}

func (q *Queries) SetOpenOrderItemsOrdered(ctx context.Context, arg SetOpenOrderItemsOrderedParams) error {
	_, err := q.db.ExecContext(ctx, setOpenOrderItemsOrdered, arg.Itemsordered, arg.ID)
	return err
}

const setOpenOrderStatusByID = `-- name: SetOpenOrderStatusByID :exec
UPDATE OpenOrder
SET Status = ?
WHERE ID = ?
`

type SetOpenOrderStatusByIDParams struct {
	Status string
	ID     int64
}

func (q *Queries) SetOpenOrderStatusByID(ctx context.Context, arg SetOpenOrderStatusByIDParams) error {
	_, err := q.db.ExecContext(ctx, setOpenOrderStatusByID, arg.Status, arg.ID)
	return err
}

const setOpenOrderSummaryByID = `-- name: SetOpenOrderSummaryByID :exec
UPDATE OpenOrder
SET Summary = ?
WHERE ID = ?
`

type SetOpenOrderSummaryByIDParams struct {
	Summary int64
	ID      int64
}

func (q *Queries) SetOpenOrderSummaryByID(ctx context.Context, arg SetOpenOrderSummaryByIDParams) error {
	_, err := q.db.ExecContext(ctx, setOpenOrderSummaryByID, arg.Summary, arg.ID)
	return err
}

const setProductCounterByID = `-- name: SetProductCounterByID :exec
UPDATE Product
SET Served = ?
WHERE ID = ?
`

type SetProductCounterByIDParams struct {
	Served int64
	ID     int64
}

func (q *Queries) SetProductCounterByID(ctx context.Context, arg SetProductCounterByIDParams) error {
	_, err := q.db.ExecContext(ctx, setProductCounterByID, arg.Served, arg.ID)
	return err
}

const setProductMenuActivityByID = `-- name: SetProductMenuActivityByID :exec
UPDATE ProductMenu
SET Activity = ?
WHERE ID = ?
`

type SetProductMenuActivityByIDParams struct {
	Activity string
	ID       int64
}

func (q *Queries) SetProductMenuActivityByID(ctx context.Context, arg SetProductMenuActivityByIDParams) error {
	_, err := q.db.ExecContext(ctx, setProductMenuActivityByID, arg.Activity, arg.ID)
	return err
}
